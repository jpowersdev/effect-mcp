---
description: Registry Pattern
globs: src/**/*Registry*.ts
alwaysApply: false
---
# Registry Pattern

Guidelines for implementing registries in the MCP project.

<rule>
name: registry_pattern
description: Standards for implementing registries using the Map-based approach
filters:
  # Match registry-related files
  - type: file_path
    pattern: ".*Registry.*\\.ts$"
  # Match registry class definitions
  - type: content
    pattern: "(?s)export\\s+class\\s+\\w+Registry"

actions:
  - type: suggest
    message: |
      ## Registry Pattern Guidelines

      For registries in the MCP project, use a simple Map-based approach with Context.Tag:

      ```typescript
      /**
       * @category registry
       */
      export class Registry extends Context.Tag("@namespace/Registry")<
        Registry,
        Map<string, Definition>
      >() {
        static readonly Live: Layer.Layer<Registry> = Layer.sync(Registry, () => new Map())
      }
      ```

      ### Working with the Registry

      #### Adding items:
      ```typescript
      export const register = (name: string, definition: Definition): Effect.Effect<void, never, Registry> =>
        Effect.flatMap(Registry, (registry) => 
          Effect.sync(() => {
            registry.set(name, definition)
          })
        )
      ```

      #### Retrieving items:
      ```typescript
      export const get = (name: string): Effect.Effect<Definition, NotFoundError, Registry> =>
        Effect.flatMap(Registry, (registry) => {
          const definition = registry.get(name)
          if (definition) {
            return Effect.succeed(definition)
          }
          return Effect.fail(new NotFoundError({ name }))
        })
      ```

      #### Listing registry contents:
      ```typescript
      export const list = (): Effect.Effect<Array<Definition>, never, Registry> =>
        Effect.map(Registry, (registry) => Array.from(registry.values()))
      ```

      ### Benefits
      1. **Simplicity** - Uses built-in Map methods directly
      2. **Performance** - Minimizes object creation overhead 
      3. **Maintainability** - Less code to maintain
      4. **Consistency** - Follows Effect's own patterns for services

examples:
  - input: |
      export class ToolRegistry extends Context.Tag("@mcp/ToolRegistry")<
        ToolRegistry,
        Map<string, ToolDefinition>
      >() {
        static readonly Live: Layer.Layer<ToolRegistry> = Layer.sync(ToolRegistry, () => new Map())
      }
    output: "Correctly implemented registry pattern"

metadata:
  priority: high
  version: 1.0
</rule>
