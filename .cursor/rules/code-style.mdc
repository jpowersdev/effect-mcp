---
description: Code Style Guide
globs: src/**/*.ts
alwaysApply: false
---
# MCP Code Style Guide

Guidelines for code style in the MCP project.

<rule>
name: code_style
description: Standards for code style in the MCP project
filters:
  # Match TypeScript files
  - type: file_extension
    pattern: "\\.ts$"

actions:
  - type: suggest
    message: |
      ## MCP Code Style Guidelines

      ### Prototype-based Programming

      #### Object Structure
      - Prefer prototype-based object structures over classes
      - Define object structures with plain interfaces rather than classes
      - Use prototype objects for shared behaviors

      #### Method Signatures
      - Methods on prototypes should accept `self` as the first parameter
      - Explicitly type `self` parameter with the object's interface type

      #### Factory Functions
      - Use factory functions for object creation
      - Factory functions should return objects using `Object.create` and `Object.assign`
      - Name factory functions using the `make` prefix (e.g., `makeIntegration`)

      ### Effect-based Programming

      #### Effect Generator Functions
      - In `Effect.gen` functions, yield effects directly without a helper function
      - Example: `yield* Effect.succeed(true)` instead of `yield* _(Effect.succeed(true))`

      #### Effect Composition
      - Prefer pipe syntax for effect composition
      - Use `Effect.flatMap`, `Effect.map`, etc. for effect transformations

      #### Service Layer
      - Use Context.Tag for service interfaces
      - Implement services using prototypes with explicit `self` parameters
      - Define service functions that accept the service as a parameter

      ### Type Safety

      #### Schema Validation
      - Use Effect's Schema system for data validation
      - Define schemas with explicit types
      - Create factory functions that validate inputs using schemas

      #### Error Handling
      - Use tagged errors for type-safe error handling
      - Define error hierarchies for different error cases
      - Handle errors explicitly in effect chains

      ### Functional Programming

      #### Immutability
      - Prefer immutable data structures
      - Use functions like `pipe` and `Map.set` for non-mutating operations
      - Return new objects rather than modifying existing ones

      #### Pure Functions
      - Write pure functions without side effects
      - Functions should have explicit inputs and outputs
      - Use Effect for operations with side effects

      #### Function Composition
      - Use function composition for building complex operations
      - Prefer small, focused functions over large monolithic ones

examples:
  - input: |
      // Factory function
      export const makeIntegration = (params: IntegrationParams): Integration => ({
        ...params
      })

      // Prototype method
      export const register = (self: Registry, definition: Definition): Effect.Effect<void, never, never> =>
        Effect.sync(() => {
          self.map.set(definition.name, definition)
        })
    output: "Code follows MCP style guidelines"

metadata:
  priority: high
  version: 1.0
</rule>
