---
description: 
globs: 
alwaysApply: false
---
# Schema-Validated Adapter Service Pattern

Guidelines for implementing Schema-Validated Adapter Services with Protocol Translation in the MCP project.

<rule>
name: schema_validated_adapter_service
description: Standards for implementing adapter services that translate between protocols using schema validation
filters:
  # Match TypeScript files
  - type: file_extension
    pattern: "\\.ts$"
  # Match adapter-related content
  - type: content
    pattern: "(?i)Service|Adapter|Client|Provider|Protocol|Translation"

actions:
  - type: suggest
    message: |
      ## Schema-Validated Adapter Service Guidelines

      A Schema-Validated Adapter Service translates between different protocols or systems while providing a consistent, type-safe interface using Effect's Schema system for validation and transformation.

      ### Service Definition

      #### Context Tag Definition
      - Define a Context Tag for the service
      - Include a nested namespace for service-specific types
      - Define a comprehensive service interface
      ```typescript
      export class ExternalService extends Context.Tag("@domain/ExternalService")<
        ExternalService, ExternalService.Service
      >() {}

      export namespace ExternalService {
        // Service-specific types and interfaces
        export interface Service {
          readonly methodA: (input: InputA) => Effect.Effect<OutputA, ErrorA, DepsA>
          readonly methodB: (input: InputB) => Effect.Effect<OutputB, ErrorB, DepsB>
          // Additional methods...
        }
      }
      ```

      #### Schema Definitions
      - Define schemas for input and output types
      - Use tagged schemas for discriminated unions
      - Include validation rules in schemas
      ```typescript
      export interface TaggedSchema<A, I, R> extends Schema.Schema<A, I, R> {
        readonly _tag: string
      }

      export interface IdentifiedSchema<A, I, R> extends Schema.Schema<A, I, R> {
        readonly identifier: string
      }

      export type StructuredSchema<A, I, R> = TaggedSchema<A, I, R> | IdentifiedSchema<A, I, R>
      ```

      ### Factory Function

      #### Service Factory
      - Create a factory function that constructs the service
      - Accept configuration options as parameters
      - Return an Effect that resolves to the service implementation
      ```typescript
      export const make = (options: {
        readonly methodA: (params: MethodAParams) => Effect.Effect<MethodAResult, MethodAError>
        readonly methodB: (params: MethodBParams) => Effect.Effect<MethodBResult, MethodBError>
      }): Effect.Effect<ExternalService> => 
        Effect.map(Effect.serviceOption(ParentContext), (parentContext) => {
          return ExternalService.of({
            methodA: (input) => 
              Effect.useSpan("ExternalService.methodA", { attributes: { input } }, (span) => 
                // Implementation with context handling
              ),
            methodB: (input) => 
              Effect.useSpan("ExternalService.methodB", { attributes: { input } }, (span) => 
                // Implementation with context handling
              )
          })
        })
      ```

      ### Protocol Translation

      #### Input Translation
      - Transform input from domain model to external protocol
      - Validate input using schemas
      - Handle errors during translation
      ```typescript
      const translateInput = <A, I, R>(
        schema: Schema.Schema<A, I, R>,
        input: I
      ): Effect.Effect<A, TranslationError> =>
        Schema.decode(schema)(input).pipe(
          Effect.mapError((cause) => new TranslationError({
            description: "Failed to translate input",
            cause
          }))
        )
      ```

      #### Output Translation
      - Transform output from external protocol to domain model
      - Validate output using schemas
      - Normalize errors from external system
      ```typescript
      const translateOutput = <A, O, R>(
        schema: Schema.Schema<A, O, R>,
        output: O
      ): Effect.Effect<A, TranslationError> =>
        Schema.decode(schema)(output).pipe(
          Effect.mapError((cause) => new TranslationError({
            description: "Failed to translate output",
            cause
          }))
        )
      ```

      ### Error Handling

      #### Error Normalization
      - Define domain-specific error types
      - Normalize external errors to domain errors
      - Include context information in errors
      ```typescript
      export class ServiceError extends Schema.TaggedError<ServiceError>()(
        "ServiceError",
        {
          module: Schema.String,
          method: Schema.String,
          description: Schema.String,
          cause: Schema.Optional(Schema.Unknown)
        }
      ) {}

      const normalizeError = (method: string, error: unknown): ServiceError =>
        error instanceof ServiceError
          ? error
          : new ServiceError({
              module: "ExternalService",
              method,
              description: "External service error",
              cause: error
            })
      ```

      ### Context Management

      #### Context Propagation
      - Propagate context between systems
      - Maintain parent context when available
      - Use spans for tracing and observability
      ```typescript
      Effect.serviceOption(ParentContext).pipe(
        Effect.flatMap((parentContext) =>
          Effect.provide(
            externalOperation,
            Context.merge(operationContext, parentContext)
          )
        )
      )
      ```

      #### Telemetry Integration
      - Add spans for operations
      - Include relevant attributes in spans
      - Track errors in spans
      ```typescript
      Effect.useSpan(
        "ExternalService.operation",
        {
          attributes: { input, options },
          captureStackTrace: false
        },
        (span) => /* operation implementation */
      )
      ```

      ### Streaming Support

      #### Streaming Operations
      - Provide both synchronous and streaming APIs when appropriate
      - Use Effect's Stream for streaming operations
      - Maintain context and error handling in streams
      ```typescript
      export interface Service {
        readonly operation: (input: Input) => Effect.Effect<Output, ServiceError>
        readonly operationStream: (input: Input) => Stream.Stream<Output, ServiceError>
      }
      ```

      #### Stream Transformation
      - Transform between different stream protocols
      - Maintain proper resource cleanup
      - Handle backpressure appropriately
      ```typescript
      Stream.unwrapScoped(
        Effect.map(
          Effect.makeSpanScoped("ExternalService.operationStream", { attributes: { input } }),
          (span) => externalStreamOperation(input).pipe(
            Stream.mapEffect(item => translateOutput(OutputSchema, item))
          )
        )
      )
      ```

examples:
  - input: |
      export class ExternalService extends Context.Tag("@domain/ExternalService")<
        ExternalService, ExternalService.Service
      >() {}

      export namespace ExternalService {
        export interface Service {
          readonly operation: (input: Input) => Effect.Effect<Output, ServiceError>
          readonly operationStream: (input: Input) => Stream.Stream<Output, ServiceError>
        }
      }

      export const make = (options: {
        readonly operation: (params: OperationParams) => Effect.Effect<OperationResult, OperationError>
        readonly operationStream: (params: OperationParams) => Stream.Stream<OperationResult, OperationError>
      }): Effect.Effect<ExternalService> => 
        Effect.map(Effect.serviceOption(ParentContext), (parentContext) => {
          return ExternalService.of({
            operation: (input) => 
              Effect.useSpan("ExternalService.operation", { attributes: { input } }, (span) => 
                translateInput(InputSchema, input).pipe(
                  Effect.flatMap(translatedInput => options.operation({ ...translatedInput })),
                  Effect.flatMap(result => translateOutput(OutputSchema, result)),
                  Effect.mapError(error => normalizeError("operation", error))
                )
              ),
            operationStream: (input) => 
              Stream.unwrapScoped(
                Effect.map(
                  Effect.makeSpanScoped("ExternalService.operationStream", { attributes: { input } }),
                  (span) => translateInput(InputSchema, input).pipe(
                    Effect.map(translatedInput => 
                      options.operationStream({ ...translatedInput }).pipe(
                        Stream.mapEffect(item => translateOutput(OutputSchema, item)),
                        Stream.mapError(error => normalizeError("operationStream", error))
                      )
                    ),
                    Stream.unwrap
                  )
                )
              )
          })
        })
    output: "Follows schema-validated adapter service pattern"

  - input: |
      export class Completions extends Context.Tag("@effect/ai/Completions")<
        Completions, Completions.Service
      >() {}

      export namespace Completions {
        export interface Service {
          readonly create: (input: AiInput.Input) => Effect.Effect<AiResponse, AiError>
          readonly stream: (input: AiInput.Input) => Stream.Stream<AiResponse, AiError>
          readonly structured: {
            <A, I, R>(options: { readonly input: AiInput.Input; readonly schema: StructuredSchema<A, I, R> }): Effect.Effect<WithResolved<A>, AiError, R>
            <A, I, R>(options: { readonly input: AiInput.Input; readonly schema: Schema.Schema<A, I, R>; readonly toolCallId: string }): Effect.Effect<WithResolved<A>, AiError, R>
          }
          readonly toolkit: (options: ToolkitOptions) => Effect.Effect<WithResolved<AiToolkit.Tool.Success>, AiError | AiToolkit.Tool.Failure, AiToolkit.Tool.Context>
          readonly toolkitStream: (options: ToolkitOptions) => Stream.Stream<WithResolved<AiToolkit.Tool.Success>, AiError | AiToolkit.Tool.Failure, AiToolkit.Tool.Context>
        }
      }

      export const make = (options: {
        readonly create: (options: CompletionOptions) => Effect.Effect<AiResponse, AiError>
        readonly stream: (options: CompletionOptions) => Stream.Stream<AiResponse, AiError>
      }): Effect.Effect<Completions> => 
        Effect.map(Effect.serviceOption(AiInput.SystemInstruction), (parentSystem) => {
          return Completions.of({
            create(input) {
              return Effect.useSpan(
                "Completions.create",
                { captureStackTrace: false },
                (span) => Effect.serviceOption(AiInput.SystemInstruction).pipe(
                  Effect.flatMap((system) => options.create({
                    input: AiInput.make(input) as Chunk.NonEmptyChunk,
                    system: Option.orElse(system, () => parentSystem),
                    tools: [],
                    required: false,
                    span
                  }))
                )
              )
            },
            // Additional methods...
          })
        })
    output: "Follows schema-validated adapter service pattern"

metadata:
  priority: high
  version: 1.0
</rule> 
